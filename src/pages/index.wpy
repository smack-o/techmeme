<style lang="less">
  @import '../assets/var.less';
  .nav {
    width: 100%;
    padding-bottom: 10px;
    border-bottom: 1px solid @ColorBorder;
    font-size: 18px;
    display: flex;
    justify-content: center;
    span {
      display: block;
      margin: 0 18px;
      color: @ColorGray;
      &.active {
        color: @ColorBlack;
        border-bottom: 5px solid @ColorBlack;
      }
    }
  }
</style>
<template>
  <view class="container">
    <view class="nav">
      <span @tap="onNavClick({{index}})" class="{{ index === navActive ? 'active' : '' }}" wx:for="{{navList}}" wx:key="{{index}}">{{navList[index]}}</span>
    </view>
    <view wx:if="{{navActive === 0}}">
      <swiper
        indicator-dots
        bindchange="bindchangeTag"
      >
        <swiper-item wx:for="{{recommends}}" wx:key="{{index}}">
          <image src="{{item.pictures[0].url}}"  @tap="goToRecommend({{item._id}})" class="slide-image"/>
        </swiper-item>
      </swiper>
      <view class="wrapper">
        <recommend :list.sync="list"></recommend>
      </view>
    </view>
  </view>
  <view wx:if="{{navActive === 1}}">
    <view class="wrapper">
      <cityguid :list.sync="guidList"></cityguid>
    </view>
  </view>
</view>
</template>

<script>
  import wepy from 'wepy'
  import Recommend from '@/components/recommend'
  import CityGuids from '@/components/cityGuids'
  import { getRestaurantList, getRecommendList, getCityGuidList } from '@/store/actions'
  import { connect } from 'wepy-redux'

  @connect({
    list (state) {
      return state.restaurant.list
    },
    guidList (state) {
      return state.recommend.guidList
    },
    recommends (state) {
      return state.recommend.list
    }
  }, {
    getRestaurantList,
    getRecommendList,
    getCityGuidList
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '探索'
    }
    components = {
      recommend: Recommend,
      cityguid: CityGuids
    }
    data = {
      navList: ['编辑推荐', '城市攻略'],
      navActive: 0
    }

    computed = {
      now () {
        return +new Date()
      }
    }

    methods = {
      onNavClick (index) {
        this.navActive = index
        if (index === 0) {
          this.methods.fetchRecommendHandler.bind(this)()
        } else if (index === 1) {
          this.methods.fetchCityGuidHandler.bind(this)()
        }
      },
      goToRecommend (id) {
        this.$root.$navigate('./recommend', {
          id,
          type: 0
        })
      },
      fetchRecommendHandler () {
        this.methods.getRestaurantList()
        this.methods.getRecommendList()
      },
      fetchCityGuidHandler () {
        this.methods.getCityGuidList()
      }
    }

    events = {
    }

    onShow() {
      this.methods.fetchRecommendHandler.bind(this)()
      // this.methods.getRestaurantList()
      // this.methods.getRecommendList()
    }
  }
</script>
